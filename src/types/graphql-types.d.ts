/* eslint-disable @typescript-eslint/consistent-type-imports */
/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
  type Maybe<T> = null | T;
  type InputMaybe<T> = null | T;
  type Exact<T extends Record<string, unknown>> = { [K in keyof T]: T[K] };
  type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
  };
  type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
  };
  /** All built-in and custom scalars, mapped to their actual values */
  type Scalars = {
    /** The `Boolean` scalar type represents `true` or `false`. */
    Boolean: boolean;
    /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: string;
    /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
    Float: number;
    GatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
    /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
    ID: string;
    /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
    Int: number;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: Record<string, unknown>;
    /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
    String: string;
  };

  type BooleanQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Boolean"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["Boolean"]>[]>;
    readonly ne: InputMaybe<Scalars["Boolean"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["Boolean"]>[]>;
  };

  type ContentfulAsset = ContentfulReference &
    Node &
    RemoteFile & {
      readonly children: readonly Node[];
      readonly contentful_id: Scalars["String"];
      readonly createdAt: Maybe<Scalars["Date"]>;
      readonly description: Maybe<Scalars["String"]>;
      readonly fields: Maybe<ContentfulAssetFields>;
      readonly file: Maybe<ContentfulAssetFile>;
      readonly filename: Scalars["String"];
      readonly filesize: Maybe<Scalars["Int"]>;
      /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
      readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
      readonly gatsbyImageData: Maybe<Scalars["GatsbyImageData"]>;
      readonly height: Maybe<Scalars["Int"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly localFile: Maybe<File>;
      readonly mimeType: Scalars["String"];
      readonly node_locale: Maybe<Scalars["String"]>;
      readonly parent: Maybe<Node>;
      readonly placeholderUrl: Maybe<Scalars["String"]>;
      readonly publicUrl: Scalars["String"];
      readonly resize: Maybe<RemoteFileResize>;
      readonly size: Maybe<Scalars["Int"]>;
      readonly spaceId: Maybe<Scalars["String"]>;
      readonly sys: Maybe<ContentfulAssetSys>;
      readonly title: Maybe<Scalars["String"]>;
      readonly updatedAt: Maybe<Scalars["Date"]>;
      readonly url: Maybe<Scalars["String"]>;
      readonly width: Maybe<Scalars["Int"]>;
    };

  type ContentfulAsset_createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulAsset_gatsbyImageArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints?: InputMaybe<readonly InputMaybe<Scalars["Int"]>[]>;
    cropFocus: InputMaybe<readonly InputMaybe<RemoteFileCropFocus>[]>;
    fit?: InputMaybe<RemoteFileFit>;
    formats?: InputMaybe<readonly RemoteFileFormat[]>;
    height: InputMaybe<Scalars["Int"]>;
    layout?: InputMaybe<RemoteFileLayout>;
    outputPixelDensities?: InputMaybe<readonly InputMaybe<Scalars["Float"]>[]>;
    placeholder?: InputMaybe<RemoteFilePlaceholder>;
    quality?: InputMaybe<Scalars["Int"]>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulAsset_gatsbyImageDataArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints: InputMaybe<readonly InputMaybe<Scalars["Int"]>[]>;
    cornerRadius?: InputMaybe<Scalars["Int"]>;
    cropFocus: InputMaybe<ContentfulImageCropFocus>;
    formats?: InputMaybe<readonly InputMaybe<GatsbyImageFormat>[]>;
    height: InputMaybe<Scalars["Int"]>;
    jpegProgressive?: InputMaybe<Scalars["Boolean"]>;
    layout: InputMaybe<GatsbyImageLayout>;
    outputPixelDensities: InputMaybe<readonly InputMaybe<Scalars["Float"]>[]>;
    placeholder: InputMaybe<GatsbyImagePlaceholder>;
    quality: InputMaybe<Scalars["Int"]>;
    resizingBehavior: InputMaybe<ImageResizingBehavior>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulAsset_resizeArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    cropFocus: InputMaybe<readonly InputMaybe<RemoteFileCropFocus>[]>;
    fit?: InputMaybe<RemoteFileFit>;
    format?: InputMaybe<RemoteFileFormat>;
    height: InputMaybe<Scalars["Int"]>;
    quality?: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulAsset_updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulAssetConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulAssetEdge[];
    readonly group: readonly ContentfulAssetGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulAsset[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulAssetConnection_distinctArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetConnection_groupArgs = {
    field: ContentfulAssetFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulAssetConnection_maxArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetConnection_minArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetConnection_sumArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetEdge = {
    readonly next: Maybe<ContentfulAsset>;
    readonly node: ContentfulAsset;
    readonly previous: Maybe<ContentfulAsset>;
  };

  type ContentfulAssetFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly createdAt: InputMaybe<FieldSelectorEnum>;
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly fields: InputMaybe<ContentfulAssetFieldsFieldSelector>;
    readonly file: InputMaybe<ContentfulAssetFileFieldSelector>;
    readonly filename: InputMaybe<FieldSelectorEnum>;
    readonly filesize: InputMaybe<FieldSelectorEnum>;
    readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
    readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
    readonly height: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly localFile: InputMaybe<FileFieldSelector>;
    readonly mimeType: InputMaybe<FieldSelectorEnum>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly placeholderUrl: InputMaybe<FieldSelectorEnum>;
    readonly publicUrl: InputMaybe<FieldSelectorEnum>;
    readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
    readonly size: InputMaybe<FieldSelectorEnum>;
    readonly spaceId: InputMaybe<FieldSelectorEnum>;
    readonly sys: InputMaybe<ContentfulAssetSysFieldSelector>;
    readonly title: InputMaybe<FieldSelectorEnum>;
    readonly updatedAt: InputMaybe<FieldSelectorEnum>;
    readonly url: InputMaybe<FieldSelectorEnum>;
    readonly width: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetFields = {
    readonly localFile: Maybe<Scalars["String"]>;
  };

  type ContentfulAssetFieldsFieldSelector = {
    readonly localFile: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetFieldsFilterInput = {
    readonly localFile: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulAssetFieldsSortInput = {
    readonly localFile: InputMaybe<SortOrderEnum>;
  };

  type ContentfulAssetFile = {
    readonly contentType: Maybe<Scalars["String"]>;
    readonly details: Maybe<ContentfulAssetFileDetails>;
    readonly fileName: Maybe<Scalars["String"]>;
    readonly url: Maybe<Scalars["String"]>;
  };

  type ContentfulAssetFileDetails = {
    readonly image: Maybe<ContentfulAssetFileDetailsImage>;
    readonly size: Maybe<Scalars["Int"]>;
  };

  type ContentfulAssetFileDetailsFieldSelector = {
    readonly image: InputMaybe<ContentfulAssetFileDetailsImageFieldSelector>;
    readonly size: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetFileDetailsFilterInput = {
    readonly image: InputMaybe<ContentfulAssetFileDetailsImageFilterInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
  };

  type ContentfulAssetFileDetailsImage = {
    readonly height: Maybe<Scalars["Int"]>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  type ContentfulAssetFileDetailsImageFieldSelector = {
    readonly height: InputMaybe<FieldSelectorEnum>;
    readonly width: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetFileDetailsImageFilterInput = {
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type ContentfulAssetFileDetailsImageSortInput = {
    readonly height: InputMaybe<SortOrderEnum>;
    readonly width: InputMaybe<SortOrderEnum>;
  };

  type ContentfulAssetFileDetailsSortInput = {
    readonly image: InputMaybe<ContentfulAssetFileDetailsImageSortInput>;
    readonly size: InputMaybe<SortOrderEnum>;
  };

  type ContentfulAssetFileFieldSelector = {
    readonly contentType: InputMaybe<FieldSelectorEnum>;
    readonly details: InputMaybe<ContentfulAssetFileDetailsFieldSelector>;
    readonly fileName: InputMaybe<FieldSelectorEnum>;
    readonly url: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetFileFilterInput = {
    readonly contentType: InputMaybe<StringQueryOperatorInput>;
    readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
    readonly fileName: InputMaybe<StringQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulAssetFileSortInput = {
    readonly contentType: InputMaybe<SortOrderEnum>;
    readonly details: InputMaybe<ContentfulAssetFileDetailsSortInput>;
    readonly fileName: InputMaybe<SortOrderEnum>;
    readonly url: InputMaybe<SortOrderEnum>;
  };

  type ContentfulAssetFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly fields: InputMaybe<ContentfulAssetFieldsFilterInput>;
    readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
    readonly filename: InputMaybe<StringQueryOperatorInput>;
    readonly filesize: InputMaybe<IntQueryOperatorInput>;
    readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly localFile: InputMaybe<FileFilterInput>;
    readonly mimeType: InputMaybe<StringQueryOperatorInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
    readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
    readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly spaceId: InputMaybe<StringQueryOperatorInput>;
    readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
    readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type ContentfulAssetGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulAssetEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulAssetGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulAsset[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulAssetGroupConnection_distinctArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetGroupConnection_groupArgs = {
    field: ContentfulAssetFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulAssetGroupConnection_maxArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetGroupConnection_minArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetGroupConnection_sumArgs = {
    field: ContentfulAssetFieldSelector;
  };

  type ContentfulAssetSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly createdAt: InputMaybe<SortOrderEnum>;
    readonly description: InputMaybe<SortOrderEnum>;
    readonly fields: InputMaybe<ContentfulAssetFieldsSortInput>;
    readonly file: InputMaybe<ContentfulAssetFileSortInput>;
    readonly filename: InputMaybe<SortOrderEnum>;
    readonly filesize: InputMaybe<SortOrderEnum>;
    readonly gatsbyImage: InputMaybe<SortOrderEnum>;
    readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
    readonly height: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly localFile: InputMaybe<FileSortInput>;
    readonly mimeType: InputMaybe<SortOrderEnum>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly placeholderUrl: InputMaybe<SortOrderEnum>;
    readonly publicUrl: InputMaybe<SortOrderEnum>;
    readonly resize: InputMaybe<RemoteFileResizeSortInput>;
    readonly size: InputMaybe<SortOrderEnum>;
    readonly spaceId: InputMaybe<SortOrderEnum>;
    readonly sys: InputMaybe<ContentfulAssetSysSortInput>;
    readonly title: InputMaybe<SortOrderEnum>;
    readonly updatedAt: InputMaybe<SortOrderEnum>;
    readonly url: InputMaybe<SortOrderEnum>;
    readonly width: InputMaybe<SortOrderEnum>;
  };

  type ContentfulAssetSys = {
    readonly revision: Maybe<Scalars["Int"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulAssetSysFieldSelector = {
    readonly revision: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulAssetSysFilterInput = {
    readonly revision: InputMaybe<IntQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulAssetSysSortInput = {
    readonly revision: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulClient = ContentfulEntry &
    ContentfulReference &
    Node & {
      readonly children: readonly Node[];
      readonly contentful_id: Scalars["String"];
      readonly createdAt: Maybe<Scalars["Date"]>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly logo: Maybe<ContentfulAsset>;
      readonly name: Maybe<Scalars["String"]>;
      readonly node_locale: Scalars["String"];
      readonly parent: Maybe<Node>;
      readonly spaceId: Maybe<Scalars["String"]>;
      readonly sys: Maybe<ContentfulClientSys>;
      readonly updatedAt: Maybe<Scalars["Date"]>;
    };

  type ContentfulClient_createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulClient_updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulClientConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulClientEdge[];
    readonly group: readonly ContentfulClientGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulClient[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulClientConnection_distinctArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientConnection_groupArgs = {
    field: ContentfulClientFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulClientConnection_maxArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientConnection_minArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientConnection_sumArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientEdge = {
    readonly next: Maybe<ContentfulClient>;
    readonly node: ContentfulClient;
    readonly previous: Maybe<ContentfulClient>;
  };

  type ContentfulClientFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly createdAt: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly logo: InputMaybe<ContentfulAssetFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly spaceId: InputMaybe<FieldSelectorEnum>;
    readonly sys: InputMaybe<ContentfulClientSysFieldSelector>;
    readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulClientFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly logo: InputMaybe<ContentfulAssetFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly spaceId: InputMaybe<StringQueryOperatorInput>;
    readonly sys: InputMaybe<ContentfulClientSysFilterInput>;
    readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type ContentfulClientGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulClientEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulClientGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulClient[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulClientGroupConnection_distinctArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientGroupConnection_groupArgs = {
    field: ContentfulClientFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulClientGroupConnection_maxArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientGroupConnection_minArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientGroupConnection_sumArgs = {
    field: ContentfulClientFieldSelector;
  };

  type ContentfulClientSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly createdAt: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly logo: InputMaybe<ContentfulAssetSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly spaceId: InputMaybe<SortOrderEnum>;
    readonly sys: InputMaybe<ContentfulClientSysSortInput>;
    readonly updatedAt: InputMaybe<SortOrderEnum>;
  };

  type ContentfulClientSys = {
    readonly contentType: Maybe<ContentfulClientSysContentType>;
    readonly revision: Maybe<Scalars["Int"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulClientSysContentType = {
    readonly sys: Maybe<ContentfulClientSysContentTypeSys>;
  };

  type ContentfulClientSysContentTypeFieldSelector = {
    readonly sys: InputMaybe<ContentfulClientSysContentTypeSysFieldSelector>;
  };

  type ContentfulClientSysContentTypeFilterInput = {
    readonly sys: InputMaybe<ContentfulClientSysContentTypeSysFilterInput>;
  };

  type ContentfulClientSysContentTypeSortInput = {
    readonly sys: InputMaybe<ContentfulClientSysContentTypeSysSortInput>;
  };

  type ContentfulClientSysContentTypeSys = {
    readonly id: Maybe<Scalars["String"]>;
    readonly linkType: Maybe<Scalars["String"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulClientSysContentTypeSysFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly linkType: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulClientSysContentTypeSysFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly linkType: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulClientSysContentTypeSysSortInput = {
    readonly id: InputMaybe<SortOrderEnum>;
    readonly linkType: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulClientSysFieldSelector = {
    readonly contentType: InputMaybe<ContentfulClientSysContentTypeFieldSelector>;
    readonly revision: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulClientSysFilterInput = {
    readonly contentType: InputMaybe<ContentfulClientSysContentTypeFilterInput>;
    readonly revision: InputMaybe<IntQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulClientSysSortInput = {
    readonly contentType: InputMaybe<ContentfulClientSysContentTypeSortInput>;
    readonly revision: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulContentType = Node & {
    readonly children: readonly Node[];
    readonly description: Maybe<Scalars["String"]>;
    readonly displayField: Maybe<Scalars["String"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly name: Maybe<Scalars["String"]>;
    readonly parent: Maybe<Node>;
    readonly sys: Maybe<ContentfulContentTypeSys>;
  };

  type ContentfulContentTypeConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulContentTypeEdge[];
    readonly group: readonly ContentfulContentTypeGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulContentType[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulContentTypeConnection_distinctArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeConnection_groupArgs = {
    field: ContentfulContentTypeFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulContentTypeConnection_maxArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeConnection_minArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeConnection_sumArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeEdge = {
    readonly next: Maybe<ContentfulContentType>;
    readonly node: ContentfulContentType;
    readonly previous: Maybe<ContentfulContentType>;
  };

  type ContentfulContentTypeFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly displayField: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly sys: InputMaybe<ContentfulContentTypeSysFieldSelector>;
  };

  type ContentfulContentTypeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly displayField: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
  };

  type ContentfulContentTypeGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulContentTypeEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulContentTypeGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulContentType[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulContentTypeGroupConnection_distinctArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeGroupConnection_groupArgs = {
    field: ContentfulContentTypeFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulContentTypeGroupConnection_maxArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeGroupConnection_minArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeGroupConnection_sumArgs = {
    field: ContentfulContentTypeFieldSelector;
  };

  type ContentfulContentTypeSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly description: InputMaybe<SortOrderEnum>;
    readonly displayField: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly sys: InputMaybe<ContentfulContentTypeSysSortInput>;
  };

  type ContentfulContentTypeSys = {
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulContentTypeSysFieldSelector = {
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulContentTypeSysFilterInput = {
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulContentTypeSysSortInput = {
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulEntry = {
    readonly children: readonly Node[];
    readonly contentful_id: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly node_locale: Scalars["String"];
    readonly parent: Maybe<Node>;
  };

  type ContentfulEntryConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulEntryEdge[];
    readonly group: readonly ContentfulEntryGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulEntry[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulEntryConnection_distinctArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryConnection_groupArgs = {
    field: ContentfulEntryFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulEntryConnection_maxArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryConnection_minArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryConnection_sumArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryEdge = {
    readonly next: Maybe<ContentfulEntry>;
    readonly node: ContentfulEntry;
    readonly previous: Maybe<ContentfulEntry>;
  };

  type ContentfulEntryFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
  };

  type ContentfulEntryFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type ContentfulEntryGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulEntryEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulEntryGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulEntry[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulEntryGroupConnection_distinctArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryGroupConnection_groupArgs = {
    field: ContentfulEntryFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulEntryGroupConnection_maxArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryGroupConnection_minArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntryGroupConnection_sumArgs = {
    field: ContentfulEntryFieldSelector;
  };

  type ContentfulEntrySortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
  };

  type ContentfulImageCropFocus =
    | "bottom_left"
    | "bottom_right"
    | "bottom"
    | "center"
    | "face"
    | "faces"
    | "left"
    | "right"
    | "top_left"
    | "top_right"
    | "top";

  type ContentfulProject = ContentfulEntry &
    ContentfulReference &
    Node & {
      readonly children: readonly Node[];
      readonly contentful_id: Scalars["String"];
      readonly createdAt: Maybe<Scalars["Date"]>;
      readonly description: Maybe<Scalars["String"]>;
      readonly id: Scalars["ID"];
      readonly image: Maybe<ContentfulAsset>;
      readonly internal: Internal;
      readonly name: Maybe<Scalars["String"]>;
      readonly node_locale: Scalars["String"];
      readonly parent: Maybe<Node>;
      readonly spaceId: Maybe<Scalars["String"]>;
      readonly sys: Maybe<ContentfulProjectSys>;
      readonly updatedAt: Maybe<Scalars["Date"]>;
      readonly url: Maybe<Scalars["String"]>;
    };

  type ContentfulProject_createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulProject_updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulProjectConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulProjectEdge[];
    readonly group: readonly ContentfulProjectGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulProject[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulProjectConnection_distinctArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectConnection_groupArgs = {
    field: ContentfulProjectFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulProjectConnection_maxArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectConnection_minArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectConnection_sumArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectEdge = {
    readonly next: Maybe<ContentfulProject>;
    readonly node: ContentfulProject;
    readonly previous: Maybe<ContentfulProject>;
  };

  type ContentfulProjectFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly createdAt: InputMaybe<FieldSelectorEnum>;
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly image: InputMaybe<ContentfulAssetFieldSelector>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly spaceId: InputMaybe<FieldSelectorEnum>;
    readonly sys: InputMaybe<ContentfulProjectSysFieldSelector>;
    readonly updatedAt: InputMaybe<FieldSelectorEnum>;
    readonly url: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulProjectFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly image: InputMaybe<ContentfulAssetFilterInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly spaceId: InputMaybe<StringQueryOperatorInput>;
    readonly sys: InputMaybe<ContentfulProjectSysFilterInput>;
    readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
    readonly url: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulProjectGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulProjectEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulProjectGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulProject[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulProjectGroupConnection_distinctArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectGroupConnection_groupArgs = {
    field: ContentfulProjectFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulProjectGroupConnection_maxArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectGroupConnection_minArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectGroupConnection_sumArgs = {
    field: ContentfulProjectFieldSelector;
  };

  type ContentfulProjectSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly createdAt: InputMaybe<SortOrderEnum>;
    readonly description: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly image: InputMaybe<ContentfulAssetSortInput>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly spaceId: InputMaybe<SortOrderEnum>;
    readonly sys: InputMaybe<ContentfulProjectSysSortInput>;
    readonly updatedAt: InputMaybe<SortOrderEnum>;
    readonly url: InputMaybe<SortOrderEnum>;
  };

  type ContentfulProjectSys = {
    readonly contentType: Maybe<ContentfulProjectSysContentType>;
    readonly revision: Maybe<Scalars["Int"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulProjectSysContentType = {
    readonly sys: Maybe<ContentfulProjectSysContentTypeSys>;
  };

  type ContentfulProjectSysContentTypeFieldSelector = {
    readonly sys: InputMaybe<ContentfulProjectSysContentTypeSysFieldSelector>;
  };

  type ContentfulProjectSysContentTypeFilterInput = {
    readonly sys: InputMaybe<ContentfulProjectSysContentTypeSysFilterInput>;
  };

  type ContentfulProjectSysContentTypeSortInput = {
    readonly sys: InputMaybe<ContentfulProjectSysContentTypeSysSortInput>;
  };

  type ContentfulProjectSysContentTypeSys = {
    readonly id: Maybe<Scalars["String"]>;
    readonly linkType: Maybe<Scalars["String"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulProjectSysContentTypeSysFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly linkType: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulProjectSysContentTypeSysFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly linkType: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulProjectSysContentTypeSysSortInput = {
    readonly id: InputMaybe<SortOrderEnum>;
    readonly linkType: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulProjectSysFieldSelector = {
    readonly contentType: InputMaybe<ContentfulProjectSysContentTypeFieldSelector>;
    readonly revision: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulProjectSysFilterInput = {
    readonly contentType: InputMaybe<ContentfulProjectSysContentTypeFilterInput>;
    readonly revision: InputMaybe<IntQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulProjectSysSortInput = {
    readonly contentType: InputMaybe<ContentfulProjectSysContentTypeSortInput>;
    readonly revision: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulReference = {
    readonly contentful_id: Scalars["String"];
    readonly id: Scalars["ID"];
  };

  type ContentfulTechnology = ContentfulEntry &
    ContentfulReference &
    Node & {
      readonly children: readonly Node[];
      readonly colour: Maybe<Scalars["String"]>;
      readonly contentful_id: Scalars["String"];
      readonly createdAt: Maybe<Scalars["Date"]>;
      readonly icon: Maybe<ContentfulAsset>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly name: Maybe<Scalars["String"]>;
      readonly node_locale: Scalars["String"];
      readonly parent: Maybe<Node>;
      readonly spaceId: Maybe<Scalars["String"]>;
      readonly sys: Maybe<ContentfulTechnologySys>;
      readonly updatedAt: Maybe<Scalars["Date"]>;
    };

  type ContentfulTechnology_createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulTechnology_updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulTechnologyConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulTechnologyEdge[];
    readonly group: readonly ContentfulTechnologyGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulTechnology[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulTechnologyConnection_distinctArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyConnection_groupArgs = {
    field: ContentfulTechnologyFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulTechnologyConnection_maxArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyConnection_minArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyConnection_sumArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyEdge = {
    readonly next: Maybe<ContentfulTechnology>;
    readonly node: ContentfulTechnology;
    readonly previous: Maybe<ContentfulTechnology>;
  };

  type ContentfulTechnologyFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly colour: InputMaybe<FieldSelectorEnum>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly createdAt: InputMaybe<FieldSelectorEnum>;
    readonly icon: InputMaybe<ContentfulAssetFieldSelector>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly spaceId: InputMaybe<FieldSelectorEnum>;
    readonly sys: InputMaybe<ContentfulTechnologySysFieldSelector>;
    readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulTechnologyFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly colour: InputMaybe<StringQueryOperatorInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly icon: InputMaybe<ContentfulAssetFilterInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly spaceId: InputMaybe<StringQueryOperatorInput>;
    readonly sys: InputMaybe<ContentfulTechnologySysFilterInput>;
    readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type ContentfulTechnologyGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulTechnologyEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulTechnologyGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulTechnology[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulTechnologyGroupConnection_distinctArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyGroupConnection_groupArgs = {
    field: ContentfulTechnologyFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulTechnologyGroupConnection_maxArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyGroupConnection_minArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologyGroupConnection_sumArgs = {
    field: ContentfulTechnologyFieldSelector;
  };

  type ContentfulTechnologySortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly colour: InputMaybe<SortOrderEnum>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly createdAt: InputMaybe<SortOrderEnum>;
    readonly icon: InputMaybe<ContentfulAssetSortInput>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly spaceId: InputMaybe<SortOrderEnum>;
    readonly sys: InputMaybe<ContentfulTechnologySysSortInput>;
    readonly updatedAt: InputMaybe<SortOrderEnum>;
  };

  type ContentfulTechnologySys = {
    readonly contentType: Maybe<ContentfulTechnologySysContentType>;
    readonly revision: Maybe<Scalars["Int"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulTechnologySysContentType = {
    readonly sys: Maybe<ContentfulTechnologySysContentTypeSys>;
  };

  type ContentfulTechnologySysContentTypeFieldSelector = {
    readonly sys: InputMaybe<ContentfulTechnologySysContentTypeSysFieldSelector>;
  };

  type ContentfulTechnologySysContentTypeFilterInput = {
    readonly sys: InputMaybe<ContentfulTechnologySysContentTypeSysFilterInput>;
  };

  type ContentfulTechnologySysContentTypeSortInput = {
    readonly sys: InputMaybe<ContentfulTechnologySysContentTypeSysSortInput>;
  };

  type ContentfulTechnologySysContentTypeSys = {
    readonly id: Maybe<Scalars["String"]>;
    readonly linkType: Maybe<Scalars["String"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulTechnologySysContentTypeSysFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly linkType: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulTechnologySysContentTypeSysFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly linkType: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulTechnologySysContentTypeSysSortInput = {
    readonly id: InputMaybe<SortOrderEnum>;
    readonly linkType: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulTechnologySysFieldSelector = {
    readonly contentType: InputMaybe<ContentfulTechnologySysContentTypeFieldSelector>;
    readonly revision: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulTechnologySysFilterInput = {
    readonly contentType: InputMaybe<ContentfulTechnologySysContentTypeFilterInput>;
    readonly revision: InputMaybe<IntQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulTechnologySysSortInput = {
    readonly contentType: InputMaybe<ContentfulTechnologySysContentTypeSortInput>;
    readonly revision: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulWork = ContentfulEntry &
    ContentfulReference &
    Node & {
      /** Returns the first child node of type contentfulWorkDescriptionTextNode or null if there are no children of given type on this node */
      readonly childContentfulWorkDescriptionTextNode: Maybe<contentfulWorkDescriptionTextNode>;
      readonly children: readonly Node[];
      /** Returns all children nodes filtered by type contentfulWorkDescriptionTextNode */
      readonly childrenContentfulWorkDescriptionTextNode: Maybe<
        readonly Maybe<contentfulWorkDescriptionTextNode>[]
      >;
      readonly colour: Maybe<Scalars["String"]>;
      readonly companyName: Maybe<Scalars["String"]>;
      readonly contentful_id: Scalars["String"];
      readonly createdAt: Maybe<Scalars["Date"]>;
      readonly description: Maybe<contentfulWorkDescriptionTextNode>;
      readonly endDate: Maybe<Scalars["Date"]>;
      readonly icon: Maybe<ContentfulAsset>;
      readonly id: Scalars["ID"];
      readonly internal: Internal;
      readonly name: Maybe<Scalars["String"]>;
      readonly node_locale: Scalars["String"];
      readonly parent: Maybe<Node>;
      readonly role: Maybe<Scalars["String"]>;
      readonly spaceId: Maybe<Scalars["String"]>;
      readonly startDate: Maybe<Scalars["Date"]>;
      readonly sys: Maybe<ContentfulWorkSys>;
      readonly updatedAt: Maybe<Scalars["Date"]>;
    };

  type ContentfulWork_createdAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulWork_endDateArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulWork_startDateArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulWork_updatedAtArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type ContentfulWorkConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulWorkEdge[];
    readonly group: readonly ContentfulWorkGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulWork[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulWorkConnection_distinctArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkConnection_groupArgs = {
    field: ContentfulWorkFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulWorkConnection_maxArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkConnection_minArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkConnection_sumArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkEdge = {
    readonly next: Maybe<ContentfulWork>;
    readonly node: ContentfulWork;
    readonly previous: Maybe<ContentfulWork>;
  };

  type ContentfulWorkFieldSelector = {
    readonly childContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFieldSelector>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly childrenContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFieldSelector>;
    readonly colour: InputMaybe<FieldSelectorEnum>;
    readonly companyName: InputMaybe<FieldSelectorEnum>;
    readonly contentful_id: InputMaybe<FieldSelectorEnum>;
    readonly createdAt: InputMaybe<FieldSelectorEnum>;
    readonly description: InputMaybe<contentfulWorkDescriptionTextNodeFieldSelector>;
    readonly endDate: InputMaybe<FieldSelectorEnum>;
    readonly icon: InputMaybe<ContentfulAssetFieldSelector>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly node_locale: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly role: InputMaybe<FieldSelectorEnum>;
    readonly spaceId: InputMaybe<FieldSelectorEnum>;
    readonly startDate: InputMaybe<FieldSelectorEnum>;
    readonly sys: InputMaybe<ContentfulWorkSysFieldSelector>;
    readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulWorkFilterInput = {
    readonly childContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly childrenContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFilterListInput>;
    readonly colour: InputMaybe<StringQueryOperatorInput>;
    readonly companyName: InputMaybe<StringQueryOperatorInput>;
    readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
    readonly createdAt: InputMaybe<DateQueryOperatorInput>;
    readonly description: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
    readonly endDate: InputMaybe<DateQueryOperatorInput>;
    readonly icon: InputMaybe<ContentfulAssetFilterInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly node_locale: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly role: InputMaybe<StringQueryOperatorInput>;
    readonly spaceId: InputMaybe<StringQueryOperatorInput>;
    readonly startDate: InputMaybe<DateQueryOperatorInput>;
    readonly sys: InputMaybe<ContentfulWorkSysFilterInput>;
    readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type ContentfulWorkGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly ContentfulWorkEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly ContentfulWorkGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly ContentfulWork[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ContentfulWorkGroupConnection_distinctArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkGroupConnection_groupArgs = {
    field: ContentfulWorkFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ContentfulWorkGroupConnection_maxArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkGroupConnection_minArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkGroupConnection_sumArgs = {
    field: ContentfulWorkFieldSelector;
  };

  type ContentfulWorkSortInput = {
    readonly childContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeSortInput>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly childrenContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeSortInput>;
    readonly colour: InputMaybe<SortOrderEnum>;
    readonly companyName: InputMaybe<SortOrderEnum>;
    readonly contentful_id: InputMaybe<SortOrderEnum>;
    readonly createdAt: InputMaybe<SortOrderEnum>;
    readonly description: InputMaybe<contentfulWorkDescriptionTextNodeSortInput>;
    readonly endDate: InputMaybe<SortOrderEnum>;
    readonly icon: InputMaybe<ContentfulAssetSortInput>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly node_locale: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly role: InputMaybe<SortOrderEnum>;
    readonly spaceId: InputMaybe<SortOrderEnum>;
    readonly startDate: InputMaybe<SortOrderEnum>;
    readonly sys: InputMaybe<ContentfulWorkSysSortInput>;
    readonly updatedAt: InputMaybe<SortOrderEnum>;
  };

  type ContentfulWorkSys = {
    readonly contentType: Maybe<ContentfulWorkSysContentType>;
    readonly revision: Maybe<Scalars["Int"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulWorkSysContentType = {
    readonly sys: Maybe<ContentfulWorkSysContentTypeSys>;
  };

  type ContentfulWorkSysContentTypeFieldSelector = {
    readonly sys: InputMaybe<ContentfulWorkSysContentTypeSysFieldSelector>;
  };

  type ContentfulWorkSysContentTypeFilterInput = {
    readonly sys: InputMaybe<ContentfulWorkSysContentTypeSysFilterInput>;
  };

  type ContentfulWorkSysContentTypeSortInput = {
    readonly sys: InputMaybe<ContentfulWorkSysContentTypeSysSortInput>;
  };

  type ContentfulWorkSysContentTypeSys = {
    readonly id: Maybe<Scalars["String"]>;
    readonly linkType: Maybe<Scalars["String"]>;
    readonly type: Maybe<Scalars["String"]>;
  };

  type ContentfulWorkSysContentTypeSysFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly linkType: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulWorkSysContentTypeSysFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly linkType: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulWorkSysContentTypeSysSortInput = {
    readonly id: InputMaybe<SortOrderEnum>;
    readonly linkType: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type ContentfulWorkSysFieldSelector = {
    readonly contentType: InputMaybe<ContentfulWorkSysContentTypeFieldSelector>;
    readonly revision: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type ContentfulWorkSysFilterInput = {
    readonly contentType: InputMaybe<ContentfulWorkSysContentTypeFilterInput>;
    readonly revision: InputMaybe<IntQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type ContentfulWorkSysSortInput = {
    readonly contentType: InputMaybe<ContentfulWorkSysContentTypeSortInput>;
    readonly revision: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type DateQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Date"]>;
    readonly gt: InputMaybe<Scalars["Date"]>;
    readonly gte: InputMaybe<Scalars["Date"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["Date"]>[]>;
    readonly lt: InputMaybe<Scalars["Date"]>;
    readonly lte: InputMaybe<Scalars["Date"]>;
    readonly ne: InputMaybe<Scalars["Date"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["Date"]>[]>;
  };

  type Directory = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly changeTime: Scalars["Date"];
    readonly children: readonly Node[];
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type Directory_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type DirectoryConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly DirectoryEdge[];
    readonly group: readonly DirectoryGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly Directory[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryConnection_distinctArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryConnection_groupArgs = {
    field: DirectoryFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryConnection_maxArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryConnection_minArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryConnection_sumArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryEdge = {
    readonly next: Maybe<Directory>;
    readonly node: Directory;
    readonly previous: Maybe<Directory>;
  };

  type DirectoryFieldSelector = {
    readonly absolutePath: InputMaybe<FieldSelectorEnum>;
    readonly accessTime: InputMaybe<FieldSelectorEnum>;
    readonly atime: InputMaybe<FieldSelectorEnum>;
    readonly atimeMs: InputMaybe<FieldSelectorEnum>;
    readonly base: InputMaybe<FieldSelectorEnum>;
    readonly birthtime: InputMaybe<FieldSelectorEnum>;
    readonly birthTime: InputMaybe<FieldSelectorEnum>;
    readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
    readonly changeTime: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly ctime: InputMaybe<FieldSelectorEnum>;
    readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
    readonly dev: InputMaybe<FieldSelectorEnum>;
    readonly dir: InputMaybe<FieldSelectorEnum>;
    readonly ext: InputMaybe<FieldSelectorEnum>;
    readonly extension: InputMaybe<FieldSelectorEnum>;
    readonly gid: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly ino: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly mode: InputMaybe<FieldSelectorEnum>;
    readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
    readonly mtime: InputMaybe<FieldSelectorEnum>;
    readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly nlink: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly prettySize: InputMaybe<FieldSelectorEnum>;
    readonly rdev: InputMaybe<FieldSelectorEnum>;
    readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
    readonly relativePath: InputMaybe<FieldSelectorEnum>;
    readonly root: InputMaybe<FieldSelectorEnum>;
    readonly size: InputMaybe<FieldSelectorEnum>;
    readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
    readonly uid: InputMaybe<FieldSelectorEnum>;
  };

  type DirectoryFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type DirectoryGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly DirectoryEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly DirectoryGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly Directory[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryGroupConnection_distinctArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryGroupConnection_groupArgs = {
    field: DirectoryFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryGroupConnection_maxArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryGroupConnection_minArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectoryGroupConnection_sumArgs = {
    field: DirectoryFieldSelector;
  };

  type DirectorySortInput = {
    readonly absolutePath: InputMaybe<SortOrderEnum>;
    readonly accessTime: InputMaybe<SortOrderEnum>;
    readonly atime: InputMaybe<SortOrderEnum>;
    readonly atimeMs: InputMaybe<SortOrderEnum>;
    readonly base: InputMaybe<SortOrderEnum>;
    readonly birthtime: InputMaybe<SortOrderEnum>;
    readonly birthTime: InputMaybe<SortOrderEnum>;
    readonly birthtimeMs: InputMaybe<SortOrderEnum>;
    readonly changeTime: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly ctime: InputMaybe<SortOrderEnum>;
    readonly ctimeMs: InputMaybe<SortOrderEnum>;
    readonly dev: InputMaybe<SortOrderEnum>;
    readonly dir: InputMaybe<SortOrderEnum>;
    readonly ext: InputMaybe<SortOrderEnum>;
    readonly extension: InputMaybe<SortOrderEnum>;
    readonly gid: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly ino: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly mode: InputMaybe<SortOrderEnum>;
    readonly modifiedTime: InputMaybe<SortOrderEnum>;
    readonly mtime: InputMaybe<SortOrderEnum>;
    readonly mtimeMs: InputMaybe<SortOrderEnum>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly nlink: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly prettySize: InputMaybe<SortOrderEnum>;
    readonly rdev: InputMaybe<SortOrderEnum>;
    readonly relativeDirectory: InputMaybe<SortOrderEnum>;
    readonly relativePath: InputMaybe<SortOrderEnum>;
    readonly root: InputMaybe<SortOrderEnum>;
    readonly size: InputMaybe<SortOrderEnum>;
    readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
    readonly uid: InputMaybe<SortOrderEnum>;
  };

  type FieldSelectorEnum = "SELECT";

  type File = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly changeTime: Scalars["Date"];
    readonly children: readonly Node[];
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type File_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type FileConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly FileEdge[];
    readonly group: readonly FileGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly File[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileConnection_distinctArgs = {
    field: FileFieldSelector;
  };

  type FileConnection_groupArgs = {
    field: FileFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileConnection_maxArgs = {
    field: FileFieldSelector;
  };

  type FileConnection_minArgs = {
    field: FileFieldSelector;
  };

  type FileConnection_sumArgs = {
    field: FileFieldSelector;
  };

  type FileEdge = {
    readonly next: Maybe<File>;
    readonly node: File;
    readonly previous: Maybe<File>;
  };

  type FileFieldSelector = {
    readonly absolutePath: InputMaybe<FieldSelectorEnum>;
    readonly accessTime: InputMaybe<FieldSelectorEnum>;
    readonly atime: InputMaybe<FieldSelectorEnum>;
    readonly atimeMs: InputMaybe<FieldSelectorEnum>;
    readonly base: InputMaybe<FieldSelectorEnum>;
    readonly birthtime: InputMaybe<FieldSelectorEnum>;
    readonly birthTime: InputMaybe<FieldSelectorEnum>;
    readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
    readonly changeTime: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly ctime: InputMaybe<FieldSelectorEnum>;
    readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
    readonly dev: InputMaybe<FieldSelectorEnum>;
    readonly dir: InputMaybe<FieldSelectorEnum>;
    readonly ext: InputMaybe<FieldSelectorEnum>;
    readonly extension: InputMaybe<FieldSelectorEnum>;
    readonly gid: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly ino: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly mode: InputMaybe<FieldSelectorEnum>;
    readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
    readonly mtime: InputMaybe<FieldSelectorEnum>;
    readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly nlink: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly prettySize: InputMaybe<FieldSelectorEnum>;
    readonly rdev: InputMaybe<FieldSelectorEnum>;
    readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
    readonly relativePath: InputMaybe<FieldSelectorEnum>;
    readonly root: InputMaybe<FieldSelectorEnum>;
    readonly size: InputMaybe<FieldSelectorEnum>;
    readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
    readonly uid: InputMaybe<FieldSelectorEnum>;
  };

  type FileFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type FileGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly FileEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly FileGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly File[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileGroupConnection_distinctArgs = {
    field: FileFieldSelector;
  };

  type FileGroupConnection_groupArgs = {
    field: FileFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileGroupConnection_maxArgs = {
    field: FileFieldSelector;
  };

  type FileGroupConnection_minArgs = {
    field: FileFieldSelector;
  };

  type FileGroupConnection_sumArgs = {
    field: FileFieldSelector;
  };

  type FileSortInput = {
    readonly absolutePath: InputMaybe<SortOrderEnum>;
    readonly accessTime: InputMaybe<SortOrderEnum>;
    readonly atime: InputMaybe<SortOrderEnum>;
    readonly atimeMs: InputMaybe<SortOrderEnum>;
    readonly base: InputMaybe<SortOrderEnum>;
    readonly birthtime: InputMaybe<SortOrderEnum>;
    readonly birthTime: InputMaybe<SortOrderEnum>;
    readonly birthtimeMs: InputMaybe<SortOrderEnum>;
    readonly changeTime: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly ctime: InputMaybe<SortOrderEnum>;
    readonly ctimeMs: InputMaybe<SortOrderEnum>;
    readonly dev: InputMaybe<SortOrderEnum>;
    readonly dir: InputMaybe<SortOrderEnum>;
    readonly ext: InputMaybe<SortOrderEnum>;
    readonly extension: InputMaybe<SortOrderEnum>;
    readonly gid: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly ino: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly mode: InputMaybe<SortOrderEnum>;
    readonly modifiedTime: InputMaybe<SortOrderEnum>;
    readonly mtime: InputMaybe<SortOrderEnum>;
    readonly mtimeMs: InputMaybe<SortOrderEnum>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly nlink: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly prettySize: InputMaybe<SortOrderEnum>;
    readonly rdev: InputMaybe<SortOrderEnum>;
    readonly relativeDirectory: InputMaybe<SortOrderEnum>;
    readonly relativePath: InputMaybe<SortOrderEnum>;
    readonly root: InputMaybe<SortOrderEnum>;
    readonly size: InputMaybe<SortOrderEnum>;
    readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
    readonly uid: InputMaybe<SortOrderEnum>;
  };

  type FloatQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Float"]>;
    readonly gt: InputMaybe<Scalars["Float"]>;
    readonly gte: InputMaybe<Scalars["Float"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["Float"]>[]>;
    readonly lt: InputMaybe<Scalars["Float"]>;
    readonly lte: InputMaybe<Scalars["Float"]>;
    readonly ne: InputMaybe<Scalars["Float"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["Float"]>[]>;
  };

  type GatsbyImageDataQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["GatsbyImageData"]>[]>;
    readonly ne: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["GatsbyImageData"]>[]>;
  };

  type GatsbyImageFormat = "" | "auto" | "avif" | "jpg" | "png" | "webp";

  type GatsbyImageLayout = "constrained" | "fixed" | "fullWidth";

  type GatsbyImagePlaceholder =
    | "blurred"
    | "dominantColor"
    | "none"
    | "tracedSVG";

  type ImageResizingBehavior =
    /** Crop a part of the original image to match the specified size. */
    | ""
    /** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
    | "crop"
    | "fill"
    /** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
    | "pad"
    /** Scale the image regardless of the original aspect ratio. */
    | "scale"
    /** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
    | "thumb";

  type IntQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Int"]>;
    readonly gt: InputMaybe<Scalars["Int"]>;
    readonly gte: InputMaybe<Scalars["Int"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["Int"]>[]>;
    readonly lt: InputMaybe<Scalars["Int"]>;
    readonly lte: InputMaybe<Scalars["Int"]>;
    readonly ne: InputMaybe<Scalars["Int"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["Int"]>[]>;
  };

  type Internal = {
    readonly content: Maybe<Scalars["String"]>;
    readonly contentDigest: Scalars["String"];
    readonly contentFilePath: Maybe<Scalars["String"]>;
    readonly description: Maybe<Scalars["String"]>;
    readonly fieldOwners: Maybe<readonly Maybe<Scalars["String"]>[]>;
    readonly ignoreType: Maybe<Scalars["Boolean"]>;
    readonly mediaType: Maybe<Scalars["String"]>;
    readonly owner: Scalars["String"];
    readonly type: Scalars["String"];
  };

  type InternalFieldSelector = {
    readonly content: InputMaybe<FieldSelectorEnum>;
    readonly contentDigest: InputMaybe<FieldSelectorEnum>;
    readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
    readonly ignoreType: InputMaybe<FieldSelectorEnum>;
    readonly mediaType: InputMaybe<FieldSelectorEnum>;
    readonly owner: InputMaybe<FieldSelectorEnum>;
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type InternalFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>;
    readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
    readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
    readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
    readonly mediaType: InputMaybe<StringQueryOperatorInput>;
    readonly owner: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type InternalSortInput = {
    readonly content: InputMaybe<SortOrderEnum>;
    readonly contentDigest: InputMaybe<SortOrderEnum>;
    readonly contentFilePath: InputMaybe<SortOrderEnum>;
    readonly description: InputMaybe<SortOrderEnum>;
    readonly fieldOwners: InputMaybe<SortOrderEnum>;
    readonly ignoreType: InputMaybe<SortOrderEnum>;
    readonly mediaType: InputMaybe<SortOrderEnum>;
    readonly owner: InputMaybe<SortOrderEnum>;
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type JSONQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["JSON"]>;
    readonly glob: InputMaybe<Scalars["JSON"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["JSON"]>[]>;
    readonly ne: InputMaybe<Scalars["JSON"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["JSON"]>[]>;
    readonly regex: InputMaybe<Scalars["JSON"]>;
  };

  /** Node Interface */
  type Node = {
    readonly children: readonly Node[];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type NodeFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly parent: InputMaybe<NodeFieldSelector>;
  };

  type NodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type NodeFilterListInput = {
    readonly elemMatch: InputMaybe<NodeFilterInput>;
  };

  type NodeSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly parent: InputMaybe<NodeSortInput>;
  };

  type PageInfo = {
    readonly currentPage: Scalars["Int"];
    readonly hasNextPage: Scalars["Boolean"];
    readonly hasPreviousPage: Scalars["Boolean"];
    readonly itemCount: Scalars["Int"];
    readonly pageCount: Scalars["Int"];
    readonly perPage: Maybe<Scalars["Int"]>;
    readonly totalCount: Scalars["Int"];
  };

  type Query = {
    readonly allContentfulAsset: ContentfulAssetConnection;
    readonly allContentfulClient: ContentfulClientConnection;
    readonly allContentfulContentType: ContentfulContentTypeConnection;
    readonly allContentfulEntry: ContentfulEntryConnection;
    readonly allContentfulProject: ContentfulProjectConnection;
    readonly allContentfulTechnology: ContentfulTechnologyConnection;
    readonly allContentfulWork: ContentfulWorkConnection;
    readonly allContentfulWorkDescriptionTextNode: contentfulWorkDescriptionTextNodeConnection;
    readonly allDirectory: DirectoryConnection;
    readonly allFile: FileConnection;
    readonly allSite: SiteConnection;
    readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
    readonly allSiteFunction: SiteFunctionConnection;
    readonly allSitePage: SitePageConnection;
    readonly allSitePlugin: SitePluginConnection;
    readonly contentfulAsset: Maybe<ContentfulAsset>;
    readonly contentfulClient: Maybe<ContentfulClient>;
    readonly contentfulContentType: Maybe<ContentfulContentType>;
    readonly contentfulEntry: Maybe<ContentfulEntry>;
    readonly contentfulProject: Maybe<ContentfulProject>;
    readonly contentfulTechnology: Maybe<ContentfulTechnology>;
    readonly contentfulWork: Maybe<ContentfulWork>;
    readonly contentfulWorkDescriptionTextNode: Maybe<contentfulWorkDescriptionTextNode>;
    readonly directory: Maybe<Directory>;
    readonly file: Maybe<File>;
    readonly site: Maybe<Site>;
    readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
    readonly siteFunction: Maybe<SiteFunction>;
    readonly sitePage: Maybe<SitePage>;
    readonly sitePlugin: Maybe<SitePlugin>;
  };

  type Query_allContentfulAssetArgs = {
    filter: InputMaybe<ContentfulAssetFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulAssetSortInput>[]>;
  };

  type Query_allContentfulClientArgs = {
    filter: InputMaybe<ContentfulClientFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulClientSortInput>[]>;
  };

  type Query_allContentfulContentTypeArgs = {
    filter: InputMaybe<ContentfulContentTypeFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulContentTypeSortInput>[]>;
  };

  type Query_allContentfulEntryArgs = {
    filter: InputMaybe<ContentfulEntryFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulEntrySortInput>[]>;
  };

  type Query_allContentfulProjectArgs = {
    filter: InputMaybe<ContentfulProjectFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulProjectSortInput>[]>;
  };

  type Query_allContentfulTechnologyArgs = {
    filter: InputMaybe<ContentfulTechnologyFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulTechnologySortInput>[]>;
  };

  type Query_allContentfulWorkArgs = {
    filter: InputMaybe<ContentfulWorkFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<ContentfulWorkSortInput>[]>;
  };

  type Query_allContentfulWorkDescriptionTextNodeArgs = {
    filter: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<
      readonly InputMaybe<contentfulWorkDescriptionTextNodeSortInput>[]
    >;
  };

  type Query_allDirectoryArgs = {
    filter: InputMaybe<DirectoryFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<DirectorySortInput>[]>;
  };

  type Query_allFileArgs = {
    filter: InputMaybe<FileFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<FileSortInput>[]>;
  };

  type Query_allSiteArgs = {
    filter: InputMaybe<SiteFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<SiteSortInput>[]>;
  };

  type Query_allSiteBuildMetadataArgs = {
    filter: InputMaybe<SiteBuildMetadataFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<SiteBuildMetadataSortInput>[]>;
  };

  type Query_allSiteFunctionArgs = {
    filter: InputMaybe<SiteFunctionFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<SiteFunctionSortInput>[]>;
  };

  type Query_allSitePageArgs = {
    filter: InputMaybe<SitePageFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<SitePageSortInput>[]>;
  };

  type Query_allSitePluginArgs = {
    filter: InputMaybe<SitePluginFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<readonly InputMaybe<SitePluginSortInput>[]>;
  };

  type Query_contentfulAssetArgs = {
    children: InputMaybe<NodeFilterListInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    createdAt: InputMaybe<DateQueryOperatorInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    fields: InputMaybe<ContentfulAssetFieldsFilterInput>;
    file: InputMaybe<ContentfulAssetFileFilterInput>;
    filename: InputMaybe<StringQueryOperatorInput>;
    filesize: InputMaybe<IntQueryOperatorInput>;
    gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    height: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    localFile: InputMaybe<FileFilterInput>;
    mimeType: InputMaybe<StringQueryOperatorInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    placeholderUrl: InputMaybe<StringQueryOperatorInput>;
    publicUrl: InputMaybe<StringQueryOperatorInput>;
    resize: InputMaybe<RemoteFileResizeFilterInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    spaceId: InputMaybe<StringQueryOperatorInput>;
    sys: InputMaybe<ContentfulAssetSysFilterInput>;
    title: InputMaybe<StringQueryOperatorInput>;
    updatedAt: InputMaybe<DateQueryOperatorInput>;
    url: InputMaybe<StringQueryOperatorInput>;
    width: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_contentfulClientArgs = {
    children: InputMaybe<NodeFilterListInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    createdAt: InputMaybe<DateQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    logo: InputMaybe<ContentfulAssetFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    spaceId: InputMaybe<StringQueryOperatorInput>;
    sys: InputMaybe<ContentfulClientSysFilterInput>;
    updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type Query_contentfulContentTypeArgs = {
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    displayField: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
  };

  type Query_contentfulEntryArgs = {
    children: InputMaybe<NodeFilterListInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
  };

  type Query_contentfulProjectArgs = {
    children: InputMaybe<NodeFilterListInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    createdAt: InputMaybe<DateQueryOperatorInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    image: InputMaybe<ContentfulAssetFilterInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    spaceId: InputMaybe<StringQueryOperatorInput>;
    sys: InputMaybe<ContentfulProjectSysFilterInput>;
    updatedAt: InputMaybe<DateQueryOperatorInput>;
    url: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_contentfulTechnologyArgs = {
    children: InputMaybe<NodeFilterListInput>;
    colour: InputMaybe<StringQueryOperatorInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    createdAt: InputMaybe<DateQueryOperatorInput>;
    icon: InputMaybe<ContentfulAssetFilterInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    spaceId: InputMaybe<StringQueryOperatorInput>;
    sys: InputMaybe<ContentfulTechnologySysFilterInput>;
    updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type Query_contentfulWorkArgs = {
    childContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
    children: InputMaybe<NodeFilterListInput>;
    childrenContentfulWorkDescriptionTextNode: InputMaybe<contentfulWorkDescriptionTextNodeFilterListInput>;
    colour: InputMaybe<StringQueryOperatorInput>;
    companyName: InputMaybe<StringQueryOperatorInput>;
    contentful_id: InputMaybe<StringQueryOperatorInput>;
    createdAt: InputMaybe<DateQueryOperatorInput>;
    description: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
    endDate: InputMaybe<DateQueryOperatorInput>;
    icon: InputMaybe<ContentfulAssetFilterInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    node_locale: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    role: InputMaybe<StringQueryOperatorInput>;
    spaceId: InputMaybe<StringQueryOperatorInput>;
    startDate: InputMaybe<DateQueryOperatorInput>;
    sys: InputMaybe<ContentfulWorkSysFilterInput>;
    updatedAt: InputMaybe<DateQueryOperatorInput>;
  };

  type Query_contentfulWorkDescriptionTextNodeArgs = {
    children: InputMaybe<NodeFilterListInput>;
    description: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
    sys: InputMaybe<contentfulWorkDescriptionTextNodeSysFilterInput>;
  };

  type Query_directoryArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_fileArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_siteArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    host: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pathPrefix: InputMaybe<StringQueryOperatorInput>;
    polyfill: InputMaybe<BooleanQueryOperatorInput>;
    port: InputMaybe<IntQueryOperatorInput>;
    siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_siteBuildMetadataArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
  };

  type Query_siteFunctionArgs = {
    absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    functionRoute: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginName: InputMaybe<StringQueryOperatorInput>;
    relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sitePageArgs = {
    children: InputMaybe<NodeFilterListInput>;
    component: InputMaybe<StringQueryOperatorInput>;
    componentChunkName: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    internalComponentName: InputMaybe<StringQueryOperatorInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    pageContext: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    path: InputMaybe<StringQueryOperatorInput>;
    pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type Query_sitePluginArgs = {
    browserAPIs: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    packageJson: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    resolve: InputMaybe<StringQueryOperatorInput>;
    ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    version: InputMaybe<StringQueryOperatorInput>;
  };

  /** Remote Interface */
  type RemoteFile = {
    readonly filename: Scalars["String"];
    readonly filesize: Maybe<Scalars["Int"]>;
    /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
    readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
    readonly height: Maybe<Scalars["Int"]>;
    readonly id: Scalars["ID"];
    readonly mimeType: Scalars["String"];
    readonly publicUrl: Scalars["String"];
    readonly resize: Maybe<RemoteFileResize>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  /** Remote Interface */
  type RemoteFile_gatsbyImageArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    breakpoints?: InputMaybe<readonly InputMaybe<Scalars["Int"]>[]>;
    cropFocus: InputMaybe<readonly InputMaybe<RemoteFileCropFocus>[]>;
    fit?: InputMaybe<RemoteFileFit>;
    formats?: InputMaybe<readonly RemoteFileFormat[]>;
    height: InputMaybe<Scalars["Int"]>;
    layout?: InputMaybe<RemoteFileLayout>;
    outputPixelDensities?: InputMaybe<readonly InputMaybe<Scalars["Float"]>[]>;
    placeholder?: InputMaybe<RemoteFilePlaceholder>;
    quality?: InputMaybe<Scalars["Int"]>;
    sizes: InputMaybe<Scalars["String"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  /** Remote Interface */
  type RemoteFile_resizeArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    cropFocus: InputMaybe<readonly InputMaybe<RemoteFileCropFocus>[]>;
    fit?: InputMaybe<RemoteFileFit>;
    format?: InputMaybe<RemoteFileFormat>;
    height: InputMaybe<Scalars["Int"]>;
    quality?: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type RemoteFileCropFocus =
    | "bottom"
    | "center"
    | "edges"
    | "entropy"
    | "faces"
    | "left"
    | "right"
    | "top";

  type RemoteFileFit = "contain" | "cover" | "fill" | "outside";

  type RemoteFileFormat = "auto" | "avif" | "jpg" | "png" | "webp";

  type RemoteFileLayout = "constrained" | "fixed" | "fullWidth";

  type RemoteFilePlaceholder =
    | "blurred"
    | "dominantColor"
    | "none"
    | "tracedSVG";

  type RemoteFileResize = {
    readonly height: Maybe<Scalars["Int"]>;
    readonly src: Maybe<Scalars["String"]>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  type RemoteFileResizeFieldSelector = {
    readonly height: InputMaybe<FieldSelectorEnum>;
    readonly src: InputMaybe<FieldSelectorEnum>;
    readonly width: InputMaybe<FieldSelectorEnum>;
  };

  type RemoteFileResizeFilterInput = {
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type RemoteFileResizeSortInput = {
    readonly height: InputMaybe<SortOrderEnum>;
    readonly src: InputMaybe<SortOrderEnum>;
    readonly width: InputMaybe<SortOrderEnum>;
  };

  type Site = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: readonly Node[];
    readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
    readonly host: Maybe<Scalars["String"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly jsxRuntime: Maybe<Scalars["String"]>;
    readonly parent: Maybe<Node>;
    readonly pathPrefix: Maybe<Scalars["String"]>;
    readonly polyfill: Maybe<Scalars["Boolean"]>;
    readonly port: Maybe<Scalars["Int"]>;
    readonly siteMetadata: Maybe<SiteSiteMetadata>;
    readonly trailingSlash: Maybe<Scalars["String"]>;
  };

  type Site_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadata = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: readonly Node[];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type SiteBuildMetadata_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadataConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteBuildMetadataEdge[];
    readonly group: readonly SiteBuildMetadataGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SiteBuildMetadata[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataConnection_distinctArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataConnection_groupArgs = {
    field: SiteBuildMetadataFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataConnection_maxArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataConnection_minArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataConnection_sumArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataEdge = {
    readonly next: Maybe<SiteBuildMetadata>;
    readonly node: SiteBuildMetadata;
    readonly previous: Maybe<SiteBuildMetadata>;
  };

  type SiteBuildMetadataFieldSelector = {
    readonly buildTime: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly parent: InputMaybe<NodeFieldSelector>;
  };

  type SiteBuildMetadataFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type SiteBuildMetadataGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteBuildMetadataEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly SiteBuildMetadataGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SiteBuildMetadata[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataGroupConnection_distinctArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataGroupConnection_groupArgs = {
    field: SiteBuildMetadataFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataGroupConnection_maxArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataGroupConnection_minArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataGroupConnection_sumArgs = {
    field: SiteBuildMetadataFieldSelector;
  };

  type SiteBuildMetadataSortInput = {
    readonly buildTime: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly parent: InputMaybe<NodeSortInput>;
  };

  type SiteConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteEdge[];
    readonly group: readonly SiteGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly Site[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteConnection_distinctArgs = {
    field: SiteFieldSelector;
  };

  type SiteConnection_groupArgs = {
    field: SiteFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteConnection_maxArgs = {
    field: SiteFieldSelector;
  };

  type SiteConnection_minArgs = {
    field: SiteFieldSelector;
  };

  type SiteConnection_sumArgs = {
    field: SiteFieldSelector;
  };

  type SiteEdge = {
    readonly next: Maybe<Site>;
    readonly node: Site;
    readonly previous: Maybe<Site>;
  };

  type SiteFieldSelector = {
    readonly buildTime: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
    readonly host: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
    readonly polyfill: InputMaybe<FieldSelectorEnum>;
    readonly port: InputMaybe<FieldSelectorEnum>;
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
    readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
  };

  type SiteFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    readonly host: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
    readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
    readonly port: InputMaybe<IntQueryOperatorInput>;
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunction = Node & {
    readonly absoluteCompiledFilePath: Scalars["String"];
    readonly children: readonly Node[];
    readonly functionRoute: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly originalAbsoluteFilePath: Scalars["String"];
    readonly originalRelativeFilePath: Scalars["String"];
    readonly parent: Maybe<Node>;
    readonly pluginName: Scalars["String"];
    readonly relativeCompiledFilePath: Scalars["String"];
  };

  type SiteFunctionConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteFunctionEdge[];
    readonly group: readonly SiteFunctionGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SiteFunction[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionConnection_distinctArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionConnection_groupArgs = {
    field: SiteFunctionFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionConnection_maxArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionConnection_minArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionConnection_sumArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionEdge = {
    readonly next: Maybe<SiteFunction>;
    readonly node: SiteFunction;
    readonly previous: Maybe<SiteFunction>;
  };

  type SiteFunctionFieldSelector = {
    readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly functionRoute: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly matchPath: InputMaybe<FieldSelectorEnum>;
    readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
    readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly pluginName: InputMaybe<FieldSelectorEnum>;
    readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  };

  type SiteFunctionFilterInput = {
    readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginName: InputMaybe<StringQueryOperatorInput>;
    readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunctionGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteFunctionEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly SiteFunctionGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SiteFunction[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionGroupConnection_distinctArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionGroupConnection_groupArgs = {
    field: SiteFunctionFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionGroupConnection_maxArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionGroupConnection_minArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionGroupConnection_sumArgs = {
    field: SiteFunctionFieldSelector;
  };

  type SiteFunctionSortInput = {
    readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly functionRoute: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly matchPath: InputMaybe<SortOrderEnum>;
    readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
    readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly pluginName: InputMaybe<SortOrderEnum>;
    readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
  };

  type SiteGraphqlTypegen = {
    readonly documentSearchPaths: Maybe<readonly Maybe<Scalars["String"]>[]>;
    readonly generateOnBuild: Maybe<Scalars["Boolean"]>;
    readonly typesOutputPath: Maybe<Scalars["String"]>;
  };

  type SiteGraphqlTypegenFieldSelector = {
    readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
    readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
    readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
  };

  type SiteGraphqlTypegenFilterInput = {
    readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
    readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
    readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteGraphqlTypegenSortInput = {
    readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
    readonly generateOnBuild: InputMaybe<SortOrderEnum>;
    readonly typesOutputPath: InputMaybe<SortOrderEnum>;
  };

  type SiteGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SiteEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly SiteGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly Site[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteGroupConnection_distinctArgs = {
    field: SiteFieldSelector;
  };

  type SiteGroupConnection_groupArgs = {
    field: SiteFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteGroupConnection_maxArgs = {
    field: SiteFieldSelector;
  };

  type SiteGroupConnection_minArgs = {
    field: SiteFieldSelector;
  };

  type SiteGroupConnection_sumArgs = {
    field: SiteFieldSelector;
  };

  type SitePage = Node & {
    readonly children: readonly Node[];
    readonly component: Scalars["String"];
    readonly componentChunkName: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly internalComponentName: Scalars["String"];
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly pageContext: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly path: Scalars["String"];
    readonly pluginCreator: Maybe<SitePlugin>;
  };

  type SitePageConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SitePageEdge[];
    readonly group: readonly SitePageGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SitePage[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageConnection_distinctArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageConnection_groupArgs = {
    field: SitePageFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageConnection_maxArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageConnection_minArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageConnection_sumArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageEdge = {
    readonly next: Maybe<SitePage>;
    readonly node: SitePage;
    readonly previous: Maybe<SitePage>;
  };

  type SitePageFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly component: InputMaybe<FieldSelectorEnum>;
    readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
    readonly matchPath: InputMaybe<FieldSelectorEnum>;
    readonly pageContext: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly path: InputMaybe<FieldSelectorEnum>;
    readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
  };

  type SitePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly component: InputMaybe<StringQueryOperatorInput>;
    readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly path: InputMaybe<StringQueryOperatorInput>;
    readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type SitePageGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SitePageEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly SitePageGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SitePage[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageGroupConnection_distinctArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageGroupConnection_groupArgs = {
    field: SitePageFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageGroupConnection_maxArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageGroupConnection_minArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageGroupConnection_sumArgs = {
    field: SitePageFieldSelector;
  };

  type SitePageSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly component: InputMaybe<SortOrderEnum>;
    readonly componentChunkName: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly internalComponentName: InputMaybe<SortOrderEnum>;
    readonly matchPath: InputMaybe<SortOrderEnum>;
    readonly pageContext: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly path: InputMaybe<SortOrderEnum>;
    readonly pluginCreator: InputMaybe<SitePluginSortInput>;
  };

  type SitePlugin = Node & {
    readonly browserAPIs: Maybe<readonly Maybe<Scalars["String"]>[]>;
    readonly children: readonly Node[];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly name: Maybe<Scalars["String"]>;
    readonly nodeAPIs: Maybe<readonly Maybe<Scalars["String"]>[]>;
    readonly packageJson: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly pluginFilepath: Maybe<Scalars["String"]>;
    readonly pluginOptions: Maybe<Scalars["JSON"]>;
    readonly resolve: Maybe<Scalars["String"]>;
    readonly ssrAPIs: Maybe<readonly Maybe<Scalars["String"]>[]>;
    readonly version: Maybe<Scalars["String"]>;
  };

  type SitePluginConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SitePluginEdge[];
    readonly group: readonly SitePluginGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SitePlugin[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginConnection_distinctArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginConnection_groupArgs = {
    field: SitePluginFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginConnection_maxArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginConnection_minArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginConnection_sumArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginEdge = {
    readonly next: Maybe<SitePlugin>;
    readonly node: SitePlugin;
    readonly previous: Maybe<SitePlugin>;
  };

  type SitePluginFieldSelector = {
    readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly name: InputMaybe<FieldSelectorEnum>;
    readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
    readonly packageJson: InputMaybe<FieldSelectorEnum>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
    readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
    readonly resolve: InputMaybe<FieldSelectorEnum>;
    readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
    readonly version: InputMaybe<FieldSelectorEnum>;
  };

  type SitePluginFilterInput = {
    readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    readonly resolve: InputMaybe<StringQueryOperatorInput>;
    readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly version: InputMaybe<StringQueryOperatorInput>;
  };

  type SitePluginGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly SitePluginEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly SitePluginGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly SitePlugin[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginGroupConnection_distinctArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginGroupConnection_groupArgs = {
    field: SitePluginFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginGroupConnection_maxArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginGroupConnection_minArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginGroupConnection_sumArgs = {
    field: SitePluginFieldSelector;
  };

  type SitePluginSortInput = {
    readonly browserAPIs: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly name: InputMaybe<SortOrderEnum>;
    readonly nodeAPIs: InputMaybe<SortOrderEnum>;
    readonly packageJson: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly pluginFilepath: InputMaybe<SortOrderEnum>;
    readonly pluginOptions: InputMaybe<SortOrderEnum>;
    readonly resolve: InputMaybe<SortOrderEnum>;
    readonly ssrAPIs: InputMaybe<SortOrderEnum>;
    readonly version: InputMaybe<SortOrderEnum>;
  };

  type SiteSiteMetadata = {
    readonly description: Maybe<Scalars["String"]>;
    readonly title: Maybe<Scalars["String"]>;
  };

  type SiteSiteMetadataFieldSelector = {
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly title: InputMaybe<FieldSelectorEnum>;
  };

  type SiteSiteMetadataFilterInput = {
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteSiteMetadataSortInput = {
    readonly description: InputMaybe<SortOrderEnum>;
    readonly title: InputMaybe<SortOrderEnum>;
  };

  type SiteSortInput = {
    readonly buildTime: InputMaybe<SortOrderEnum>;
    readonly children: InputMaybe<NodeSortInput>;
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
    readonly host: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly jsxRuntime: InputMaybe<SortOrderEnum>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly pathPrefix: InputMaybe<SortOrderEnum>;
    readonly polyfill: InputMaybe<SortOrderEnum>;
    readonly port: InputMaybe<SortOrderEnum>;
    readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
    readonly trailingSlash: InputMaybe<SortOrderEnum>;
  };

  type SortOrderEnum = "ASC" | "DESC";

  type StringQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["String"]>;
    readonly glob: InputMaybe<Scalars["String"]>;
    readonly in: InputMaybe<readonly InputMaybe<Scalars["String"]>[]>;
    readonly ne: InputMaybe<Scalars["String"]>;
    readonly nin: InputMaybe<readonly InputMaybe<Scalars["String"]>[]>;
    readonly regex: InputMaybe<Scalars["String"]>;
  };

  type contentfulWorkDescriptionTextNode = Node & {
    readonly children: readonly Node[];
    readonly description: Maybe<Scalars["String"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
    readonly sys: Maybe<contentfulWorkDescriptionTextNodeSys>;
  };

  type contentfulWorkDescriptionTextNodeConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly contentfulWorkDescriptionTextNodeEdge[];
    readonly group: readonly contentfulWorkDescriptionTextNodeGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly contentfulWorkDescriptionTextNode[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type contentfulWorkDescriptionTextNodeConnection_distinctArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeConnection_groupArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type contentfulWorkDescriptionTextNodeConnection_maxArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeConnection_minArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeConnection_sumArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeEdge = {
    readonly next: Maybe<contentfulWorkDescriptionTextNode>;
    readonly node: contentfulWorkDescriptionTextNode;
    readonly previous: Maybe<contentfulWorkDescriptionTextNode>;
  };

  type contentfulWorkDescriptionTextNodeFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>;
    readonly description: InputMaybe<FieldSelectorEnum>;
    readonly id: InputMaybe<FieldSelectorEnum>;
    readonly internal: InputMaybe<InternalFieldSelector>;
    readonly parent: InputMaybe<NodeFieldSelector>;
    readonly sys: InputMaybe<contentfulWorkDescriptionTextNodeSysFieldSelector>;
  };

  type contentfulWorkDescriptionTextNodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly sys: InputMaybe<contentfulWorkDescriptionTextNodeSysFilterInput>;
  };

  type contentfulWorkDescriptionTextNodeFilterListInput = {
    readonly elemMatch: InputMaybe<contentfulWorkDescriptionTextNodeFilterInput>;
  };

  type contentfulWorkDescriptionTextNodeGroupConnection = {
    readonly distinct: readonly Scalars["String"][];
    readonly edges: readonly contentfulWorkDescriptionTextNodeEdge[];
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: readonly contentfulWorkDescriptionTextNodeGroupConnection[];
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: readonly contentfulWorkDescriptionTextNode[];
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type contentfulWorkDescriptionTextNodeGroupConnection_distinctArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeGroupConnection_groupArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type contentfulWorkDescriptionTextNodeGroupConnection_maxArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeGroupConnection_minArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeGroupConnection_sumArgs = {
    field: contentfulWorkDescriptionTextNodeFieldSelector;
  };

  type contentfulWorkDescriptionTextNodeSortInput = {
    readonly children: InputMaybe<NodeSortInput>;
    readonly description: InputMaybe<SortOrderEnum>;
    readonly id: InputMaybe<SortOrderEnum>;
    readonly internal: InputMaybe<InternalSortInput>;
    readonly parent: InputMaybe<NodeSortInput>;
    readonly sys: InputMaybe<contentfulWorkDescriptionTextNodeSysSortInput>;
  };

  type contentfulWorkDescriptionTextNodeSys = {
    readonly type: Maybe<Scalars["String"]>;
  };

  type contentfulWorkDescriptionTextNodeSysFieldSelector = {
    readonly type: InputMaybe<FieldSelectorEnum>;
  };

  type contentfulWorkDescriptionTextNodeSysFilterInput = {
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type contentfulWorkDescriptionTextNodeSysSortInput = {
    readonly type: InputMaybe<SortOrderEnum>;
  };

  type HomeQueryVariables = Exact<Record<string, never>>;

  type HomeQuery = {
    readonly projects: {
      readonly edges: readonly {
        readonly node: {
          readonly description: null | string;
          readonly id: string;
          readonly image: {
            readonly file: { readonly url: null | string } | null;
            readonly title: null | string;
          } | null;
          readonly name: null | string;
          readonly url: null | string;
        };
      }[];
    };
    readonly technology: {
      readonly edges: readonly {
        readonly node: {
          readonly colour: null | string;
          readonly icon: {
            readonly file: { readonly url: null | string } | null;
            readonly title: null | string;
          } | null;
          readonly id: string;
          readonly name: null | string;
        };
      }[];
    };
    readonly work: {
      readonly edges: readonly {
        readonly node: {
          readonly colour: null | string;
          readonly companyName: null | string;
          readonly description: { readonly description: null | string } | null;
          readonly endDate: null | string;
          readonly icon: {
            readonly file: { readonly url: null | string } | null;
            readonly title: null | string;
          } | null;
          readonly id: string;
          readonly name: null | string;
          readonly role: null | string;
          readonly startDate: null | string;
        };
      }[];
    };
  };
}
